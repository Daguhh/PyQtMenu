#!/usr/bin/python3

"""
Python numpy calculator imbed in a rofi interface (python-rofi):
        - can evaluate all numpy expression
        - create a variable containing your result_lists for further usage
"""
from numpy import *
from rofi import Rofi
import string
from itertools import islice
from collections import deque

MEMORY_SIZE = 20 #Â number of calculation kept in memory
ALPHABET = list(string.ascii_lowercase) # used for variable name generation
r = Rofi(lines=1) # initiate rofi interface

# iterable = slicing window of 3 letters lenght over the math expression
def read_by_3(iterable, size=3):
    iterable = iter(" " + iterable + " ")
    d = deque(islice(iterable, size), size)
    yield d
    for x in iterable:
        d.append(x)
        yield d

# generate variable name by cycling over alphabet
def gen_var_letter(number=20):
    ALPHABET = list(string.ascii_lowercase)[0:number]
    while 1 :
        i=0
        while i<number :
            yield ALPHABET[i]
            i+=1

vals = list(zeros(0))
result_list = deque(vals,MEMORY_SIZE)
result_name = deque(vals,MEMORY_SIZE)
algebric_list = deque(vals,MEMORY_SIZE)
var_name_gen = gen_var_letter(number=MEMORY_SIZE)

msg="start typing a numpy expression\ntip : you can use generated variable name in your formulas"
while 1 :

    # get user's expression
    algebric_expression = r.text_entry('calc', msg) # with variables, ex : 2*a + b**2
    numeric_expression = str() # with numerical values for evaluation : 2*4 + 7**2

    # for each character, if it's a variable, replace by its numerical value
    for [prev_char, character, follow_char] in read_by_3(algebric_expression) :

        # variable is an alphabet letter
        if not(character in ALPHABET) :
            numeric_expression += character # = keep the character

        # let's do not confuse with mathematical tools (cos, exp, abs...)
        # variable is an isolated letter
        elif prev_char in ALPHABET or follow_char in ALPHABET:
            numeric_expression += character

        else :
            index = result_name.index(character)
            numeric_expression += str(result_list[index])

    result_list.append(eval(numeric_expression))
    result_name.append(var_name_gen.__next__())
    algebric_list.append(algebric_expression)

    msg=str()
    for i,j,k in zip(list(result_list)[::-1], list(result_name)[::-1], list(algebric_list)[::-1]):
        print(i,j,k)
        msg += "{} : {} = {} \n".format(j, k, i)
